################################################################################
#
#   json-001.json - JSON tests
#
#  It's best to run these tests with nor setup file, as setup is handled here
#
#
{
  "defaults":{
    "fail":"hard"
  }
}
# SKIP
{
    "t":{"label":"Set configs for JSON tests",
         "send":["{js:1}", "{jv:5}", "{tv:1}", "{qv:0}", "{sv:2}", "{si:100}"],
         "delay":0.100},
    "r":{"status":0}
}
#
# JSON TESTS BEGIN HERE
#
# exponentiated number
# test for maxumim marshalling recursion depth
# test for maximum name size
# test for maximum string size
# test JSON has too many pairs for NV list
#
# SUCCESS CASES
#
{
    "t":{"label":"Nested parent read request - multiple children",
        "send":["{x:{vm:n,fr:n}}"]},
        "r":{"status":0}
}
#

#
{
    "t":{"label":"Simple read with null - strict mode",
         "send":["{\"fb\":n}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Simple read with null - relaxed mode",
         "send":["{fb:n}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Simple read with double quotes (null string)",
         "send":["{fb:\"\"}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Simple write with floating point number",
         "send":["{g59c:100.1}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Simple write with integer point number",
         "send":["{tid:12345678}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Simple write with boolean true",
         "send":["{1po:t}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Simple write with boolean false",
         "send":["{1po:f}"]},
        "r":{"status":0}
}
# SKIP
{
    "t":{"label":"Simple write with string value",
         "send":["{str:\"string\"}"]},
        "r":{"status":0}
}
# SKIP
{
    "t":{"label":"Simple write with string value with escaped quotes",
         "send":["{str:\"string\\\"embedded\\\"\"}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Sibling read request",
        "send":["{xvm:n,xfr:n}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Sibling write request",
        "send":["{xvm:10000,xfr:8000,xtn:0,xtm:400}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Nested parent read request - multiple children",
        "send":["{x:{vm:n,fr:n}}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Nested JSON write request - multiple children",
        "send":["{x:{vm:1000,fr:1000,tn:0,tm:200}}"],
        "after":["{x:{vm:1500,fr:1500}}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Nested JSON mixed read / write request",
        "send":["{x:{vm:2000,fr:n}}"],
        "after":["{x:{vm:1500,fr:1500}}"]},
        "r":{"status":0}
}
# _normalize_json_string() testers. In ALL CAPS for better inspection during debug
#
{
    "t":{"label":"White space padding cases - relaxed",
         "send":["  {FB:N}","{ FB:N}","{FB :N}","{FB: N}","{FB:N }","{FB:N}   ", "  { FB : N }  "]},
        "r":{"status":0}
}
#
{
    "t":{"label":"White space padding cases - strict",
         "send":["  {\"FB\":N}","{\" FB\":N}","{\"FB \":N}","{\"FB\": N}","{\"FB\":N }","{\"FB\":N}   ", "  { FB : N }  "]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Some multi-element cases",
        "send":["{fb:n,fv:n}","{posx:n,posy:n,posz:n}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Multi-level case, CAPITALS",
         "send":["{X:{VM:NULL}}"]},
        "r":{"status":0}
}
#
{
    "t":{"label":"Group JSON read request",
         "send":["{x:n}"]},
        "r":{"status":0}
}
# EOF
# EXCEPTION TESTS
#
{
    "t":{"label":"JSON of excessive length > 128 bytes",
         "send":["{x:\"0_________10________20________30________40________50________60________70________80________90________100_______110_______120_______130\"}"]},
        "r":{"status":107}
}
#
{
    "t":{"label":"JSON exceeds maximum pad characters",
         "send":["{ x:n}"]},
        "r":{"status":111}
}
#
{
    "t":{"label":"JSON exceeds maximum name characters",
         "send":["{nameistoolong:n}"]},
        "r":{"status":107}
}
# EOF
{
    "t":{"label":"Set status report for no-machine tests",
         "send":["{sr:f}","{sr:{line:t,posx:t,posy:t,posz:t,feed:t,vel:t,unit:t,coor:t,dist:t,stat:t}}"],
         "delay":0.500},
    "r":{"status":0}
}
# EOF
# {x:{vm:n,fr:n}}
# {"X":{"VM":N,"FR":123,"Str":"String\"ESC\""}}
# {  fb :   n}
# {FB:N}
# {FB:""}   // treated as a NULL
# {FB:" "}  // treated as a string with a space in it
# {"str":"string \"ESCAPED\" test"}
